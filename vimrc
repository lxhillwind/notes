vim9script
nnoremap <buffer> <Space>;r <ScriptCmd>RefreshContents()<CR>

# open ./README.md for usage.


def RefreshContents()
    var result: dict<list<dict<string>>>
    for file in system("git ls-files '*.md'")->split("\n")
        if file == 'README.md'
            continue
        endif
        const metadata: dict<string> = GenMetadata(file, readfile(file, '', 3))
        if !result->has_key(metadata.category)
            result[metadata.category] = []
        endif
        result[metadata.category]->add(metadata)
    endfor
    result->values()->sort((a, b) => a[0].title > b[0].title ? 1 : -1)

    var lines_to_write: list<string> =<< trim END
    % TILs (today I learned)

    <!--
    generated by vimrc. DO NOT EDIT.

    " usage:
    : lcd %:h | source ./vimrc
    " - create file in this vim session
    "   dir as tag, filename as title;
    "   (be relax: path is used to generate tag / title; it does not do bad
    "   thing even if format is not correct)
    " - add file to git (git add XXX)
    " - then pressing <Leader>;r to refresh content of README.md (this file).
    -->

    Idea comes from <https://til.simonwillison.net/> (which comes from others...)

    <a link="rss.xml">rss</a>

    ---

    END
    for item in result->keys()->sort((a, b) => a > b ? 1 : -1)
        lines_to_write->add(printf('- %s', item))
        for article in result[item]
            const suffix = article.date->empty() ? '' : printf(' %s', article.date)
            lines_to_write->add(printf('  - [%s](%s)%s', article.title, article.filename, suffix))
        endfor
    endfor
    writefile(lines_to_write, 'README.md')
    if bufname() == 'README.md'
        # reload
        e
    else
        if &modified
            sp
        endif
        e README.md
    endif
enddef


def GenMetadata(filename: string, args: list<string>): dict<string>
    var useful_args: list<string>
    for arg in args
        # https://pandoc.org/MANUAL.html#metadata-blocks
        # NOTE we do not handle multiple-lines.
        if arg->match('\v^\%($| )') < 0
            break
        endif
        # skip leading "% "
        useful_args->add(arg[2 : ])
    endfor
    var title = useful_args->get(0, '')
    # the second line is author: we don't use it...
    const date = useful_args->get(2, '')
    if title->empty()
        title = filename->substitute('\v^.*/', '', '')
    endif
    return {
        title: title,
        date: date,
        category: filename->substitute('\v/[^/].*$', '', ''),
        filename: filename,
        }
enddef


augroup TIL
    au!
    au BufNewFile *.md {
        append(0, ['% ' .. bufname()->fnamemodify(':t:r'), '%', '% ' .. strftime('%Y-%m-%d'), ])
        normal ggw
    }
augroup END
